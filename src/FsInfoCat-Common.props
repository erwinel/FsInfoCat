<Project>

    <PropertyGroup>
        <!-- Un-comment next line to force OS platform -->
        <!-- <OsPlatform>Linux</OsPlatform> -->
        <Platform Condition=" '$(Platform)' == '' Or '$(Platform)' == 'Any CPU' ">AnyCPU</Platform>
        <!-- Specify major, minor and build numbers only here. Revision number will be calculated according to OsPlatform and whether it is .net framework -->
        <AssemblyVersion>0.1.0</AssemblyVersion>
        <FileVersion>$(AssemblyVersion)</FileVersion>
        <Company>Leonard T. Erwine</Company>
        <Copyright>Copyright Â© Leonard Thomas Erwine 2021</Copyright>
        <SolutionDir>$([MSBuild]::EnsureTrailingSlash('$([System.IO.Directory]::GetParent(ProjectDir))'))</SolutionDir>
        <RepositoryRootDir>$([MSBuild]::EnsureTrailingSlash('$([System.IO.Directory]::GetParent(SolutionDir))'))</RepositoryRootDir>
        <DistroFolder>$(RepositoryRootDir)Setup\Distro\</DistroFolder>
        <UtilDistroFolder>$(DistroFolder)Util\</UtilDistroFolder>
        <T4DistroZip>$(UtilDistroFolder)T4.zip</T4DistroZip>
        <SetupBinFolder>$(RepositoryRootDir)Setup\bin\</SetupBinFolder>
        <T4BinFolder>$(SetupBinFolder)T4\</T4BinFolder>
        <T4HostExe>$(T4BinFolder)StandaloneT4Host.exe</T4HostExe>
        <PsModuleFolder>$(SetupBinFolder)$(TargetName)</PsModuleFolder>
        <PsModuleManfest>$(PsModuleFolder)$(TargetName).psd1</PsModuleManfest>
        <PsModuleDistroFolder>$(DistroFolder)PS</PsModuleDistroFolder>
        <PsModuleDistroZip>$(PsModuleDistroFolder)$(TargetName)-$(OsPlatform)-$(TargetFramework.Replace(".", "")).zip</PsModuleDistroZip>
    </PropertyGroup>

    <Choose>
        <When Condition=" '$(Configuration)' == 'NetFrameworkDebug' Or '$(Configuration)' == 'NetFrameworkRelease' ">
            <PropertyGroup>
                <IsNetFramework>true</IsNetFramework>
            </PropertyGroup>
        </When>
        <Otherwise>
            <PropertyGroup>
                <IsNetFramework>false</IsNetFramework>
            </PropertyGroup>
        </Otherwise>
    </Choose>

    <Choose>
        <When Condition=" '$(DefineConstants)' == '' ">
            <PropertyGroup>
                <DefineConstants>TRACE</DefineConstants>
            </PropertyGroup>
        </When>
        <Otherwise>
            <PropertyGroup>
                <DefineConstants Condition="!$([System.Text.RegularExpressions.Regex]::IsMatch($(DefineConstants), '^(.*;)*TRACE(;.*)*$'))">$(DefineConstants);TRACE</DefineConstants>
            </PropertyGroup>
        </Otherwise>
    </Choose>

    <Choose>
        <When Condition=" $([System.Text.RegularExpressions.Regex]::IsMatch($(DefineConstants), '^(.*;)*WINDOWS(;.*)*$')) ">
            <PropertyGroup>
                <OsPlatform>Windows</OsPlatform>
            </PropertyGroup>
        </When>
        <When Condition=" $([System.Text.RegularExpressions.Regex]::IsMatch($(DefineConstants), '^(.*;)*LINUX(;.*)*$')) ">
            <PropertyGroup>
                <OsPlatform>OSX</OsPlatform>
            </PropertyGroup>
        </When>
        <When Condition=" $([System.Text.RegularExpressions.Regex]::IsMatch($(DefineConstants), '^(.*;)*OSX(;.*)*$')) ">
            <PropertyGroup>
                <OsPlatform>Linux</OsPlatform>
            </PropertyGroup>
        </When>
        <When Condition=" '$(OsPlatform)' == '' ">
            <Choose>
                <When Condition=" $([MSBuild]::IsOsPlatform(`Windows`)) ">
                    <PropertyGroup>
                        <OsPlatform>Windows</OsPlatform>
                    </PropertyGroup>
                </When>
                <When Condition=" $([MSBuild]::IsOsPlatform(`OSX`)) ">
                    <PropertyGroup>
                        <OsPlatform>OSX</OsPlatform>
                    </PropertyGroup>
                </When>
                <Otherwise>
                    <PropertyGroup>
                        <OsPlatform>Linux</OsPlatform>
                    </PropertyGroup>
                </Otherwise>
            </Choose>
        </When>
        <Otherwise>
            <PropertyGroup Condition=" '$(OsPlatform)' != 'Windows' And '$(OsPlatform)' != 'OSX' ">
                <OsPlatform>Linux</OsPlatform>
            </PropertyGroup>
        </Otherwise>
    </Choose>

    <Choose>
        <When Condition=" '$(OsPlatform)' == 'Windows' ">
            <PropertyGroup Condition=" !$([System.Text.RegularExpressions.Regex]::IsMatch($(DefineConstants), '^(.*;)*WINDOWS(;.*)*$')) ">
                <DefineConstants>$(DefineConstants);WINDOWS</DefineConstants>
            </PropertyGroup>
        </When>
        <When Condition=" '$(OsPlatform)' == 'OSX' ">
            <PropertyGroup Condition=" !$([System.Text.RegularExpressions.Regex]::IsMatch($(DefineConstants), '^(.*;)*OSX(;.*)*$')) ">
                <DefineConstants>$(DefineConstants);OSX</DefineConstants>
            </PropertyGroup>
        </When>
        <Otherwise>
            <PropertyGroup Condition=" !$([System.Text.RegularExpressions.Regex]::IsMatch($(DefineConstants), '^(.*;)*LINUX(;.*)*$')) ">
                <DefineConstants>$(DefineConstants);LINUX</DefineConstants>
            </PropertyGroup>
        </Otherwise>
    </Choose>

    <Choose>
        <When Condition=" $([System.Text.RegularExpressions.Regex]::IsMatch($(DefineConstants), '^(.*;)*NETCORE(;.*)*$')) ">
            <PropertyGroup>
                <IsNetFramework>false</IsNetFramework>
            </PropertyGroup>
        </When>
        <When Condition=" $([System.Text.RegularExpressions.Regex]::IsMatch($(DefineConstants), '^(.*;)*NETFRAMEWORK(;.*)*$')) ">
            <PropertyGroup>
                <IsNetFramework>true</IsNetFramework>
            </PropertyGroup>
        </When>
        <Otherwise>
            <PropertyGroup Condition=" '$(IsNetFramework)' != 'true' ">
                <IsNetFramework>false</IsNetFramework>
            </PropertyGroup>
        </Otherwise>
    </Choose>

    <Choose>
        <When Condition=" '$(IsNetFramework)' == 'true' ">
            <Choose>
                <When Condition=" '$(OsPlatform)' == 'Linux' ">
                    <PropertyGroup>
                        <AssemblyVersion>$(AssemblyVersion).4</AssemblyVersion>
                    </PropertyGroup>
                </When>
                <When Condition=" '$(OsPlatform)' == 'OSX' ">
                    <PropertyGroup>
                        <AssemblyVersion>$(AssemblyVersion).5</AssemblyVersion>
                    </PropertyGroup>
                </When>
                <Otherwise>
                    <PropertyGroup>
                        <AssemblyVersion>$(AssemblyVersion).3</AssemblyVersion>
                    </PropertyGroup>
                </Otherwise>
            </Choose>
            <PropertyGroup>
                <DefineConstants Condition=" !$([System.Text.RegularExpressions.Regex]::IsMatch($(DefineConstants), '^(.*;)*NETFRAMEWORK(;.*)*$')) ">$(DefineConstants);NETFRAMEWORK</DefineConstants>
                <FileVersion>$(AssemblyVersion)</FileVersion>
            </PropertyGroup>
        </When>
        <Otherwise>
            <Choose>
                <When Condition=" '$(OsPlatform)' == 'Linux' ">
                    <PropertyGroup>
                        <AssemblyVersion>$(AssemblyVersion).1</AssemblyVersion>
                    </PropertyGroup>
                </When>
                <When Condition=" '$(OsPlatform)' == 'OSX' ">
                    <PropertyGroup>
                        <AssemblyVersion>$(AssemblyVersion).2</AssemblyVersion>
                    </PropertyGroup>
                </When>
                <Otherwise>
                    <PropertyGroup>
                        <AssemblyVersion>$(AssemblyVersion).0</AssemblyVersion>
                    </PropertyGroup>
                </Otherwise>
            </Choose>
            <PropertyGroup>
                <DefineConstants Condition=" !$([System.Text.RegularExpressions.Regex]::IsMatch($(DefineConstants), '^(.*;)*NETCORE(;.*)*$')) ">$(DefineConstants);NETCORE</DefineConstants>
                <FileVersion>$(AssemblyVersion)</FileVersion>
            </PropertyGroup>
        </Otherwise>
    </Choose>

    <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
        <DebugSymbols>true</DebugSymbols>
        <DebugType>full</DebugType>
        <Optimize>false</Optimize>
        <DefineConstants Condition=" !$([System.Text.RegularExpressions.Regex]::IsMatch($(DefineConstants), '^(.*;)*DEBUG(;.*)*$')) ">DEBUG;$(DefineConstants)</DefineConstants>
        <ErrorReport>prompt</ErrorReport>
        <WarningLevel>4</WarningLevel>
        <!-- <DocumentationFile>bin\Debug\FsInfoCat.PS.XML</DocumentationFile> -->
        <!-- <CodeAnalysisRuleSet>MinimumRecommendedRules.ruleset</CodeAnalysisRuleSet> -->
    </PropertyGroup>

    <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
        <DebugType>pdbonly</DebugType>
        <Optimize>true</Optimize>
        <ErrorReport>prompt</ErrorReport>
        <WarningLevel>4</WarningLevel>
    </PropertyGroup>

</Project>
