<Window x:Class="DevHelperUI.RegexBuilder.RegexBuilderWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:DevHelperUI.RegexBuilder"
        xmlns:Converters="clr-namespace:DevHelperUI.Converters" 
        mc:Ignorable="d"
        Title="Regular Expression Builder" Height="600" Width="800">
    <Window.Resources>
        <Converters:BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
        <Converters:BooleanToTextWrappingConverter x:Key="BooleanToTextWrappingConverter" False="Wrap" True="NoWrap" NullSource="Wrap"/>
        <Converters:BooleanToScrollBarVisibilityConverter x:Key="BooleanToHorizontalScrollBarVisibilityConverter" True="Auto" False="Hidden" NullSource="Hidden"/>
        <Converters:StringToVisibilityConverter x:Key="ErrorMessageVisibilityConverter" NullSource="Collapsed" />
        <Converters:BooleanToVisibilityConverter x:Key="ShowPropertiesToVisibilityConverter" NullSource="Collapsed" />
    </Window.Resources>
    <Window.DataContext>
        <local:RegexBuilderViewModel />
    </Window.DataContext>
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition/>
        </Grid.RowDefinitions>
        <Menu>
            <MenuItem Header="Copy" ToolTip="Copy text to clipboard">
                <MenuItem Header="Decoded text" ToolTip="Copies the current text selection in it's decoded form to the clipboard."/>
                <MenuItem Header="As-is" ToolTip="Copies the current text selection to the clipboard in it's current encoded format."/>
                <MenuItem Header="C# String Literal" ToolTip="Copies the current text selection as a C# string literal, including surrounding double-quotes"/>
                <MenuItem Header="Verbatim C# String Literal" ToolTip="Copies the current text selection as a C# vertatim string literal including the surrounding double-quotes and leading &quot;@&quot; symbol."/>
                <MenuItem Header="PowerShell String Literal" ToolTip="Copies the current text selection as a PowerShell-compatible string literal, including surrounding quotation marks.&#x0A;The string literal will be single-quoted unless a double-quoted string literal produces a shorter result."/>
                <MenuItem Header="PowerShell Here-To String Literal" ToolTip="Copies current text selection as a PowerShell-compatible Here-to string literal (@&quot;&lt;newline&gt;&#x2026;&lt;newline&gt;&quot;@), including surrounding quotation marks.&#x0A;New line character sequences `r, `n and `r`n will result in additional line breaks."/>
                <MenuItem Header="XML-Encoded" ToolTip="Copies the current text selection as an XML-Encoded string suitable for the content of an XML element."/>
                <MenuItem Header="XmlAttribute-Encoded" ToolTip="Copies the current text selection as an XML Attribute-Encoded string suitable for the content of an XML attribute, NOT including surrounding quotation marks."/>
                <MenuItem Header="URI-Path-Encoded" ToolTip="Copies the current text selection as a URI-Encoded string, suitable as a relative or absolute URI string.&#x0A;This simply encodes any individual characters that are not valid for relative or absolute URI strings. It does not verify that the URI components are in proper order."/>
                <MenuItem Header="URI-Data-Encoded" ToolTip="Copies the current text selection as a URI-Encoded data string, compatible with path segments as well as query string keys and values."/>
            </MenuItem>
            <MenuItem Header="Paste" ToolTip="Paste text from clipboard">
                <MenuItem Header="Auto-detect clipboard content format" ToolTip="Attemps to detect the format of the text in the clipbord before decoding and pasting."/>
                <MenuItem Header="Use Current Format" ToolTip="Pastes contents of the clipboard into the current text selection and assumes the clipboard is uses the same format."/>
                <MenuItem Header="As-Is" ToolTip="Directly pastes contents of the clipboard with no decoding."/>
                <MenuItem Header="Backslash-Escaped" ToolTip="Pastes contents of the clipboard into the currently selected text, decoding any valid CS-style escape sequences.&#x0A;his assumes the clipboard contains the CONTENTS of a string literal, and not the actual string literal itself."/>
                <MenuItem Header="Backtick-Escaped" ToolTip="Pastes contents of the clipboard into the currently selected text, decoding any valid PowerShell-style escape sequences.&#x0A;his assumes the clipboard contains the CONTENTS of a string literal, and not the actual string literal itself."/>
                <MenuItem Header="XML-Encoded" ToolTip="Pastes the contents of the clipboard into the currently selected text, decoding any valid XML entities."/>
                <MenuItem Header="URI-Encoded" ToolTip="Pastes the contents of the clipboard into the currently selected text, decoding any valid URI escape sequences."/>
            </MenuItem>
            <MenuItem Header="Regex">
                <MenuItem Header="Group" ToolTip="Creates a grouping from the current text selection (&#x2026;)."/>
                <MenuItem Header="Escape" ToolTip="Escapes special regular expression characters in the current text selection."/>
            </MenuItem>
            <MenuItem Header="Input Format" ToolTip="Format of input string text boxes">
                <MenuItem Header="Normal" IsCheckable="True" ToolTip="Evaluate input text as-is."/>
                <MenuItem Header="C# Backslash-Escaped" IsCheckable="True" ToolTip="Decoded valid C# escape sequences before evaluating. Any invalid octal, hexidecimal or unicode escape sequences will result in an error."/>
                <MenuItem Header="PowerShell Backtick-Escaped" IsCheckable="True" ToolTip="Decode valid PowerShell escape sequences before evaluating.&#x0A;This supports the unicode escape sequences (`u{xxxx}) as well. Any invalid unicode sequences will result in an error."/>
                <MenuItem Header="XML-Encoded" IsCheckable="True" ToolTip="Decode XML character entity sequences before evaluating.&#x0A;This will result in an error if any of the character entity sequences are invalid."/>
                <MenuItem Header="URI-Encoded" IsCheckable="True" ToolTip="Decode URI escape sequences before evaulating."/>
                <MenuItem Header="Base64-Encoded" IsCheckable="True" ToolTip="Decode as Base-64 encoded text before evaluating.&#x0A;This will result in an error if any of the text is not valid base-64-encoded data."/>
            </MenuItem>
            <MenuItem Header="Results Format" ToolTip="Format of result display">
                <MenuItem Header="Normal" IsCheckable="True" ToolTip=""/>
                <MenuItem Header="C# Backslash-Escaped" IsCheckable="True" ToolTip=""/>
                <MenuItem Header="PowerShell Backtick-Escaped" IsCheckable="True" ToolTip=""/>
                <MenuItem Header="XML-Encoded" IsCheckable="True" ToolTip=""/>
                <MenuItem Header="XML Attribute-Encoded" IsCheckable="True" ToolTip=""/>
                <MenuItem Header="URI-Encoded" IsCheckable="True" ToolTip=""/>
            </MenuItem>
        </Menu>
        <TabControl>
            <TabItem Header="Inputs">
                <Grid Margin="0,5">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="2*"/>
                        <ColumnDefinition MinWidth="290"/>
                    </Grid.ColumnDefinitions>
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition/>
                            <RowDefinition/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>
                        <Border BorderBrush="Black" BorderThickness="1" Margin="5,2,5,5">
                            <Grid>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition/>
                                    <RowDefinition Height="Auto"/>
                                </Grid.RowDefinitions>
                                <Label Content="Regular Expression" HorizontalAlignment="Left" Margin="5,-9,0,1" Padding="5,0,5,1" Foreground="White" Background="Gray"/>
                                <TextBox Grid.Row="1" Margin="5,0,5,5" AcceptsReturn="{Binding IgnorePatternWhitespaceOption, Mode=OneWay}" AcceptsTab="{Binding IgnorePatternWhitespaceOption, Mode=OneWay}" HorizontalScrollBarVisibility="{Binding IgnorePatternWhitespaceOption, Converter={StaticResource BooleanToHorizontalScrollBarVisibilityConverter}}"  VerticalScrollBarVisibility="Auto" TextWrapping="{Binding IgnorePatternWhitespaceOption, Converter={StaticResource BooleanToTextWrappingConverter}}" />
                                <TextBlock HorizontalAlignment="Left" Grid.Row="2" TextWrapping="Wrap" Text="{Binding PatternErrorMessage, Mode=OneWay}" VerticalAlignment="Top" Padding="5,0,5,5" Foreground="Red" Visibility="{Binding PatternErrorMessage, Converter={StaticResource ErrorMessageVisibilityConverter}, Mode=OneWay}" Margin="0,-5,0,5"/>
                            </Grid>
                        </Border>
                        <Border Grid.Row="1" BorderBrush="Black" BorderThickness="1" Margin="5,15,5,0">
                            <Grid>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition/>
                                </Grid.RowDefinitions>
                                <Label Content="Input Text" HorizontalAlignment="Left" Margin="5,-10,0,1" Padding="5,1" Foreground="White" Background="Gray"/>
                                <DataGrid Grid.Row="1" AutoGenerateColumns="False" ItemsSource="{Binding InputTextItems}" Margin="5,0,5,5" SelectionMode="Single" SelectedItem="{Binding SelectedInputItem}">
                                    <DataGrid.Columns>
                                        <DataGridTextColumn Binding="{Binding Value}" ClipboardContentBinding="{Binding Value}" Header="Value" Width="*" IsReadOnly="True"/>
                                        <DataGridCheckBoxColumn Binding="{Binding IsMatch}" ClipboardContentBinding="{Binding IsMatch}" Header="Is Match" IsReadOnly="True"/>
                                        <DataGridTemplateColumn IsReadOnly="True">
                                            <DataGridTemplateColumn.CellTemplate>
                                                <DataTemplate>
                                                    <Button Content="Delete" Command="{Binding DeleteCommand, Mode=OneWay}"/>
                                                </DataTemplate>
                                            </DataGridTemplateColumn.CellTemplate>
                                        </DataGridTemplateColumn>
                                    </DataGrid.Columns>
                                    <DataGrid.RowDetailsTemplate>
                                        <DataTemplate>
                                            <Grid Height="100" MinWidth="100">
                                                <Grid.RowDefinitions>
                                                    <RowDefinition/>
                                                    <RowDefinition Height="Auto"/>
                                                </Grid.RowDefinitions>
                                                <TextBox Text="{Binding Value}" MinHeight="25" />
                                            </Grid>
                                        </DataTemplate>
                                    </DataGrid.RowDetailsTemplate>
                                </DataGrid>
                            </Grid>
                        </Border>
                        <GridSplitter Grid.Row="1" Height="5" VerticalAlignment="Top" HorizontalAlignment="Stretch" Margin="5,0">
                            <GridSplitter.Background>
                                <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                    <GradientStop Color="Black"/>
                                    <GradientStop Color="WhiteSmoke" Offset="0.1"/>
                                    <GradientStop Color="Gray" Offset="1"/>
                                </LinearGradientBrush>
                            </GridSplitter.Background>
                        </GridSplitter>
                        <Button Content="Add" Grid.Row="2" HorizontalAlignment="Right" VerticalAlignment="Top" Margin="0,0,5,0" Command="{Binding AddCommand, Mode=OneWay}"/>
                    </Grid>
                    <GridSplitter Grid.Column="1" HorizontalAlignment="Left" Width="5" Visibility="{Binding ShowProperties, Converter={StaticResource ShowPropertiesToVisibilityConverter}}" Margin="0,1,0,0">
                        <GridSplitter.Background>
                            <LinearGradientBrush EndPoint="1,0.5" StartPoint="0,0.5">
                                <GradientStop Color="Black"/>
                                <GradientStop Color="WhiteSmoke" Offset="0.1"/>
                                <GradientStop Color="Gray" Offset="1"/>
                            </LinearGradientBrush>
                        </GridSplitter.Background>
                    </GridSplitter>
                    <Border Grid.Column="1" BorderBrush="Black" BorderThickness="1" Margin="10,2,5,0" Visibility="{Binding ShowProperties, Converter={StaticResource ShowPropertiesToVisibilityConverter}}">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition/>
                            </Grid.RowDefinitions>
                            <Label Content="Properties" HorizontalAlignment="Left" Margin="5,-9,0,1" Padding="5,1" Foreground="White" Background="Gray"/>
                            <Grid Grid.Row="1" Margin="5,0">
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto" />
                                    <RowDefinition />
                                </Grid.RowDefinitions>
                                <Label Content="Options" HorizontalAlignment="Left" Padding="0,0,0,1" />
                                <WrapPanel Grid.Row="1" Orientation="Vertical" Height="75" >
                                    <CheckBox Content="None" ToolTip="Specifies that no options are set." IsChecked="{Binding NoneOption}" IsEnabled="{Binding NoneEnabled, Mode=OneWay}"/>
                                    <CheckBox Content="Ignore Case" ToolTip="Specifies case-insensitive matching." IsChecked="{Binding IgnoreCaseOption}" IsThreeState="{Binding IgnoreCaseThreeState, Mode=OneWay}"/>
                                    <CheckBox Content="Multi-line" ToolTip="Multiline mode. Changes the meaning of ^ and $ so they match at the beginning and end, respectively, of any line, and not just the beginning and end of the entire string." IsChecked="{Binding MultilineOption}" IsThreeState="{Binding MultilineThreeState, Mode=OneWay}"/>
                                    <CheckBox Content="Explicit Capture" ToolTip="Specifies that the only valid captures are explicitly named or numbered groups of the form (?&lt;name&gt;...). This allows unnamed parentheses to act as noncapturing groups without the syntactic clumsiness of the expression (?:...)." IsChecked="{Binding ExplicitCaptureOption}"/>
                                    <CheckBox Content="Compiled" ToolTip="Specifies that the regular expression is compiled to an assembly. This yields faster execution but increases startup time." IsChecked="{Binding CompiledOption}" IsThreeState="{Binding CompiledThreeState, Mode=OneWay}"/>
                                    <CheckBox Content="Single-line" ToolTip="Specifies single-line mode. Changes the meaning of the dot (.) so it matches every character (instead of every character except \n)." IsChecked="{Binding SinglelineOption}"/>
                                    <CheckBox Content="Ignore Pattern Whitespace" ToolTip="Eliminates unescaped white space from the pattern and enables comments marked with #. However, this value does not affect or eliminate white space in character classes, numeric quantifiers, or tokens that mark the beginning of individual regular expression language elements." IsChecked="{Binding IgnorePatternWhitespaceOption}"/>
                                    <CheckBox Content="Right-to-Left" ToolTip="Specifies that the search will be from right to left instead of from left to right." IsChecked="{Binding RightToLeftOption}"/>
                                    <CheckBox Content="ECMAScript" ToolTip="Enables ECMAScript-compliant behavior for the expression. Using this value implicitly enables the Ignore Case, Multi-line, and Compiled options." IsChecked="{Binding ECMAScriptOption}"/>
                                    <CheckBox Content="Culture Invariant" ToolTip="Specifies that cultural differences in language is ignored." IsChecked="{Binding CultureInvariantOption}"/>
                                </WrapPanel>
                            </Grid>
                            <Border Grid.Row="2" BorderBrush="Black" BorderThickness="0,1,0,0" Padding="0,0,0,5" Margin="5,5,5,0">
                                <Grid>
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="Auto" />
                                        <RowDefinition />
                                    </Grid.RowDefinitions>
                                    <Label Content="Groups" HorizontalAlignment="Left" Padding="0,0,0,1" />
                                    <DataGrid Grid.Row="1" ItemsSource="{Binding PatternGroupItems}" AutoGenerateColumns="False" >
                                        <DataGrid.Columns>
                                            <DataGridTextColumn Binding="{Binding Number}" ClipboardContentBinding="{x:Null}" Header="#" IsReadOnly="True"/>
                                            <DataGridTextColumn Binding="{Binding Name}" ClipboardContentBinding="{x:Null}" Header="Name" Width="*" IsReadOnly="True"/>
                                            <DataGridTextColumn Binding="{Binding MatchCount}" ClipboardContentBinding="{x:Null}" Header="Match Count" IsReadOnly="True"/>
                                        </DataGrid.Columns>
                                    </DataGrid>
                                </Grid>
                            </Border>
                        </Grid>
                    </Border>
                </Grid>
            </TabItem>
            <TabItem Header="Single Match">
                <Grid/>
            </TabItem>
            <TabItem Header="Multiple Match">
                <Grid/>
            </TabItem>
            <TabItem Header="Replace">
                <Grid/>
            </TabItem>
        </TabControl>
    </Grid>
</Window>
